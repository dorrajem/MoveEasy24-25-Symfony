{% extends 'base.html.twig' %}

{% block title %}Liste des Trains{% endblock %}

{% block body %}
<div class="container py-4">

    {# üîµ Header #}
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h4 mb-0">
            <i class="fas fa-train me-2"></i> Liste des Trains
        </h1>
        <a href="{{ path('app_train_new') }}" class="btn btn-custom btn-sm">
            <i class="fas fa-plus me-1"></i> Ajouter un train
        </a>
    </div>

    {# üîµ Filter Section #}
    <div class="card p-3 mb-4 shadow-sm">
        <form id="filter-form" class="row g-3 align-items-center">

            <div class="col-md-4">
                <label for="capaciteRange" class="form-label small mb-1">Capacit√© maximale: 
                    <span id="capacite-value">{{ maxCapacite }}</span>
                </label>
                <input type="range" class="form-range" id="capaciteRange" name="maxCapacite" min="0" max="4000" value="{{ maxCapacite }}">
            </div>

            <div class="col-md-3">
                <label for="sortField" class="form-label small mb-1">Trier par:</label>
                <select id="sortField" name="sort" class="form-select form-select-sm">
                    <option value="capacite" {% if currentSort == 'capacite' %}selected{% endif %}>Capacit√©</option>
                    <option value="dateMiseEnService" {% if currentSort == 'dateMiseEnService' %}selected{% endif %}>Date de mise en service</option>
                </select>
            </div>

            <div class="col-md-2">
                <label for="sortDirection" class="form-label small mb-1">Direction:</label>
                <select id="sortDirection" name="direction" class="form-select form-select-sm">
                    <option value="ASC" {% if currentDirection == 'ASC' %}selected{% endif %}>Croissant</option>
                    <option value="DESC" {% if currentDirection == 'DESC' %}selected{% endif %}>D√©croissant</option>
                </select>
            </div>

            <input type="hidden" name="minCapacite" value="0">

            <div class="col-auto">
                <button type="submit" class="btn btn-custom-green custom-green-btn">
                    <i class="fas fa-filter me-1"></i> Filtrer
                </button>
                <a href="{{ path('app_train_index') }}" id="reset-button" class="btn btn-outline-secondary btn-sm">
                    R√©initialiser
                </a>
            </div>
<label class="form-check-label small" for="favorites-only-toggle">
                    Afficher uniquement mes trains favoris ‚ù§Ô∏è
                </label>
            <div class="form-check form-switch mt-3 text-end">
                <input class="form-check-input" type="checkbox" id="favorites-only-toggle">
                
            </div>

        </form>
    </div>

    {# üîµ Dynamic Result Count #}
    <div class="mb-3 text-end small text-muted" id="train-count">
        üîé Affichage de <span id="train-count-number">{{ trains|length }}</span> train(s)
    </div>

    {# üîµ Train List Table #}
    <div class="card shadow-sm">
        <div class="card-body p-0">
            <table class="table table-hover align-middle mb-0">
                <thead class="table-light text-center small">
                    <tr>
                        <th>Type</th>
                        <th>Capacit√©</th>
                        <th>Statut</th>
                        <th>Date de mise en service</th>
                        <th>Favori</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="train-list">
                {% for train in trains %}
                    <tr class="train-row" data-train-id="{{ train.idTrain }}">
                        <td class="text-center small">{{ train.TypeTrain }}</td>
                        <td class="text-center small">{{ train.capacite }}</td>
                        <td class="text-center">
                            <span class="badge rounded-pill {{ train.statut == 'En service' ? 'bg-success' : (train.statut == 'En maintenance' ? 'bg-primary' : 'bg-danger') }}">
                                {{ train.statut }}
                            </span>
                        </td>
                        <td class="text-center small">
                            {{ train.dateMiseEnService ? train.dateMiseEnService|date('d/m/Y') : '-' }}
                        </td>
                        <td class="text-center">
                            <button class="btn btn-light btn-sm favorite-btn">
                                <i class="fas fa-heart"></i>
                            </button>
                        </td>
                        <td class="text-center">
                            <div class="btn-group-vertical gap-1">
                                <a href="{{ path('app_train_show', { idTrain: train.idTrain }) }}" class="btn btn-outline-info btn-sm">Voir</a>
                                <a href="{{ path('app_train_edit', { idTrain: train.idTrain }) }}" class="btn btn-outline-warning btn-sm">Modifier</a>
                                <a href="{{ path('app_maintenance_train_by_train', { idTrain: train.idTrain }) }}" class="btn btn-outline-primary btn-sm">
                                    <i class="fas fa-tools me-1"></i> Maintenances
                                </a>
                                <a href="{{ path('app_maintenance_train_new', { idTrain: train.idTrain }) }}" class="btn btn-outline-success btn-sm">
                                    <i class="fas fa-plus me-1"></i> Ajouter maintenance
                                </a>
                            </div>
                        </td>
                    </tr>
                {% else %}
                    <tr>
                        <td colspan="6" class="text-center text-muted py-5 animate__animated animate__fadeIn">
                            <i class="fas fa-info-circle fa-3x mb-3"></i><br>
                            <strong>Aucun train trouv√© pour les crit√®res choisis.</strong>
                        </td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>
        </div>
    </div>

    {# üîµ Load More Button #}
    {% if trains|length >= 20000000 %}
        <div class="d-flex justify-content-center my-4" id="load-more-wrapper">
            <button class="btn btn-outline-primary btn-sm" id="load-more-btn">
                <i class="fas fa-chevron-down me-1"></i> Charger plus
            </button>
        </div>
    {% endif %}

</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script src="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"></script>
<script>
document.addEventListener('DOMContentLoaded', function () {
    const capaciteRange = document.getElementById('capaciteRange');
    const capaciteValue = document.getElementById('capacite-value');
    const filterForm = document.getElementById('filter-form');
    const trainList = document.getElementById('train-list');
    const trainCountNumber = document.getElementById('train-count-number');
    const sortField = document.getElementById('sortField');
    const sortDirection = document.getElementById('sortDirection');
    const favoritesToggle = document.getElementById('favorites-only-toggle');
    const resetButton = document.getElementById('reset-button');
    const loadMoreBtn = document.getElementById('load-more-btn');
    const loadMoreWrapper = document.getElementById('load-more-wrapper');
    let displayedTrains = document.querySelectorAll('.train-row').length;
    let batchSize = 5;
    let favorites = JSON.parse(localStorage.getItem('favorites') || '[]');

    capaciteRange.addEventListener('input', () => capaciteValue.textContent = capaciteRange.value);

    filterForm.addEventListener('submit', (e) => {
        e.preventDefault();
        reloadTrains();
    });

    if (loadMoreBtn) {
        loadMoreBtn.addEventListener('click', () => {
            displayedTrains += batchSize;
            reloadTrains(displayedTrains);
        });
    }

    favoritesToggle.addEventListener('change', () => filterFavorites());

    resetButton.addEventListener('click', (e) => {
        e.preventDefault();
        window.location.href = '{{ path('app_train_index') }}';
    });

    function reloadTrains(limit = 10) {
        const url = new URL('{{ path('app_train_index') }}', window.location.origin);
        url.searchParams.set('minCapacite', 0);
        url.searchParams.set('maxCapacite', capaciteRange.value);
        url.searchParams.set('sort', sortField.value);
        url.searchParams.set('direction', sortDirection.value);
        url.searchParams.set('limit', limit);

        fetch(url)
            .then(response => response.text())
            .then(html => {
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                trainList.innerHTML = doc.getElementById('train-list').innerHTML;
                trainCountNumber.textContent = doc.getElementById('train-count-number').textContent;
                updateFavoriteIcons();
                attachFavoriteListeners();
                if (document.querySelectorAll('.train-row').length < limit && loadMoreWrapper) {
                    loadMoreWrapper.style.display = 'none';
                }
                if (favoritesToggle.checked) {
                    filterFavorites();
                }
            })
            .catch(error => console.error('Erreur AJAX:', error));
    }

    function updateFavoriteIcons() {
        document.querySelectorAll('.train-row').forEach(row => {
            const trainId = row.dataset.trainId;
            const heartIcon = row.querySelector('.favorite-btn i');
            favorites.includes(trainId) ? heartIcon.classList.add('text-danger') : heartIcon.classList.remove('text-danger');
        });
    }

    function attachFavoriteListeners() {
        document.querySelectorAll('.favorite-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const row = e.target.closest('.train-row');
                const trainId = row.dataset.trainId;
                favorites = favorites.includes(trainId) 
                    ? favorites.filter(id => id !== trainId) 
                    : [...favorites, trainId];
                localStorage.setItem('favorites', JSON.stringify(favorites));
                updateFavoriteIcons();
                if (favoritesToggle.checked) {
                    filterFavorites();
                }
            });
        });
    }

    function filterFavorites() {
        document.querySelectorAll('.train-row').forEach(row => {
            const trainId = row.dataset.trainId;
            row.style.display = favorites.includes(trainId) ? '' : 'none';
        });
        const visibleRows = document.querySelectorAll('.train-row:not([style*="display: none"])').length;
        trainCountNumber.textContent = visibleRows;
    }

    // Initial load
    updateFavoriteIcons();
    attachFavoriteListeners();
});
</script>
{% endblock %}
